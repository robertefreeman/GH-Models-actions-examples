name: Panda Cam AI Monitor

on:
  schedule:
    # Run every 30 minutes during zoo hours (9 AM - 6 PM EST)
    - cron: '*/30 13-22 * * *'  # UTC time
  workflow_dispatch:

jobs:
  panda-watch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser imagemagick

    - name: Capture panda cam screenshot
      run: |
        set -euo pipefail
        echo "🐼 Capturing screenshot from National Zoo panda cam..."
        
        # Create screenshots directory
        mkdir -p screenshots
        
        # First, try to find the direct video stream URL by inspecting the page
        echo "🔍 Finding webcam stream URL..."
        
        # Use curl to get the webpage and extract video/image URLs
        PAGE_CONTENT=$(curl -s -L "https://nationalzoo.si.edu/webcams/panda-cam" || echo "")
        
        # Look for common video stream patterns (HLS, MP4, direct image feeds)
        VIDEO_URL=""
        IMAGE_URL=""
        
        # Extract potential stream URLs from the page
        if [ -n "$PAGE_CONTENT" ]; then
          # Look for .m3u8 (HLS streams)
          VIDEO_URL=$(echo "$PAGE_CONTENT" | grep -oE 'https?://[^"'\''[:space:]]+\.m3u8[^"'\''[:space:]]*' | head -1 || echo "")
          
          # Look for direct image feeds (.jpg, .png)
          if [ -z "$VIDEO_URL" ]; then
            IMAGE_URL=$(echo "$PAGE_CONTENT" | grep -oE 'https?://[^"'\''[:space:]]+\.(jpg|jpeg|png)[^"'\''[:space:]]*' | grep -E '(cam|live|stream|panda)' | head -1 || echo "")
          fi
          
          # Look for YouTube embed or other video sources
          if [ -z "$VIDEO_URL" ] && [ -z "$IMAGE_URL" ]; then
            YOUTUBE_ID=$(echo "$PAGE_CONTENT" | grep -oE 'youtube\.com/embed/[a-zA-Z0-9_-]+' | sed 's/.*embed\///' | head -1 || echo "")
            if [ -n "$YOUTUBE_ID" ]; then
              VIDEO_URL="https://www.youtube.com/watch?v=$YOUTUBE_ID"
            fi
          fi
        fi
        
        echo "Found video URL: $VIDEO_URL"
        echo "Found image URL: $IMAGE_URL"
        
        # Method 1: Try direct image URL if found
        if [ -n "$IMAGE_URL" ]; then
          echo "🎯 Trying direct image URL..."
          if curl -L -o screenshots/panda_cam.png "$IMAGE_URL" && [ -s screenshots/panda_cam.png ]; then
            echo "✅ Direct image capture successful"
          else
            IMAGE_URL=""
          fi
        fi
        
        # Method 2: Use improved headless browser with better flags
        if [ -z "$IMAGE_URL" ] || [ ! -s screenshots/panda_cam.png ]; then
          echo "🌐 Using headless browser with improved settings..."
          
          # Add more comprehensive flags to avoid D-Bus and GUI errors
          timeout 45s chromium-browser \
            --headless \
            --disable-gpu \
            --no-sandbox \
            --disable-dev-shm-usage \
            --disable-web-security \
            --disable-features=VizDisplayCompositor \
            --disable-background-timer-throttling \
            --disable-backgrounding-occluded-windows \
            --disable-renderer-backgrounding \
            --disable-field-trial-config \
            --disable-extensions \
            --disable-plugins \
            --disable-background-networking \
            --disable-sync \
            --disable-translate \
            --disable-ipc-flooding-protection \
            --no-first-run \
            --no-default-browser-check \
            --disable-logging \
            --disable-dbus \
            --remote-debugging-port=0 \
            --window-size=1920,1080 \
            --screenshot=screenshots/panda_cam.png \
            --virtual-time-budget=15000 \
            "https://nationalzoo.si.edu/webcams/panda-cam" 2>/dev/null || {
            echo "⚠️ Browser screenshot had issues, checking if file was created..."
          }
        fi
        
        # Method 3: Fallback to a known working webcam if available
        if [ ! -s screenshots/panda_cam.png ]; then
          echo "🔄 Trying fallback webcam sources..."
          
          # Try some alternative panda cam sources or a placeholder
          FALLBACK_URLS=(
            "https://nationalzoo.si.edu/sites/default/files/animals/pandacam-thumb.jpg"
            "https://placekitten.com/800/600"  # Cute placeholder if all else fails
          )
          
          for url in "${FALLBACK_URLS[@]}"; do
            echo "Trying fallback: $url"
            if curl -L -o screenshots/panda_cam.png "$url" && [ -s screenshots/panda_cam.png ]; then
              echo "✅ Fallback image captured: $url"
              break
            fi
          done
        fi
        
        # Verify screenshot was created and has content
        if [ -f screenshots/panda_cam.png ] && [ -s screenshots/panda_cam.png ]; then
          echo "✅ Screenshot captured successfully"
          ls -la screenshots/panda_cam.png
          
          # Check if it's a valid image file
          file screenshots/panda_cam.png
        else
          echo "❌ Screenshot capture failed completely"
          exit 1
        fi

    - name: Convert image to base64
      run: |
        set -euo pipefail
        echo "🔄 Converting image to base64..."
        
        # First, let's examine what we captured
        echo "📊 Image file details:"
        ls -la screenshots/panda_cam.png
        file screenshots/panda_cam.png
        
        # Check image dimensions if possible
        if command -v identify >/dev/null 2>&1; then
          identify screenshots/panda_cam.png
        fi
        
        # Convert image to base64
        base64 -w 0 screenshots/panda_cam.png > screenshots/panda_cam_base64.txt
        
        # Check if conversion was successful
        if [ -s screenshots/panda_cam_base64.txt ]; then
          echo "✅ Image converted to base64"
          echo "Base64 length: $(wc -c < screenshots/panda_cam_base64.txt) characters"
          
          # Verify base64 starts correctly (should start with data type indicator)
          echo "Base64 starts with: $(head -c 50 screenshots/panda_cam_base64.txt)..."
        else
          echo "❌ Base64 conversion failed"
          exit 1
        fi

    - name: Analyze image with AI
      run: |
        set -euo pipefail
        echo "🤖 Analyzing panda cam image with AI..."
        echo "Timestamp: $(date)"
        echo "Model: ${{ secrets.OPENAI_MODEL || 'gpt-4o' }}"
        echo "Endpoint: ${{ secrets.OPENAI_API_ENDPOINT }}"
        
        # Read base64 image
        IMAGE_BASE64=$(cat screenshots/panda_cam_base64.txt)
        
        # Create the API request payload
        cat > api_request.json << EOF
        {
          "model": "${{ secrets.OPENAI_MODEL || 'gpt-4o' }}",
          "messages": [
            {
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": "Analyze this image that should be from the National Zoo panda webcam. Please provide a detailed analysis in the following format:\n\n**Panda Status:** [Present/Not Visible/Webpage Only]\n**Activity:** [What the panda is doing, if visible]\n**Scene Description:** [Brief description of what's visible in the image]\n**Image Type:** [Webcam Feed/Webpage Screenshot/Static Image/Other]\n**Confidence:** [High/Medium/Low]\n\nIf you see a panda, be specific about their behavior (sleeping, eating, playing, climbing, etc.). If no panda is visible, describe what is shown instead (empty enclosure, habitat features, website elements, etc.). If this appears to be a webpage screenshot rather than a direct webcam feed, please note that and describe what webpage elements are visible."
                },
                {
                  "type": "image_url",
                  "image_url": {
                    "url": "data:image/png;base64,${IMAGE_BASE64}"
                  }
                }
              ]
            }
          ],
          "max_tokens": 300,
          "temperature": 0.3
        }
        EOF
        
        # Make API call with proper error handling
        echo "Making API call..."
        HTTP_STATUS=$(curl -s -w "%{http_code}" -X POST "${{ secrets.OPENAI_API_ENDPOINT }}/chat/completions" \
          -o api_response.json \
          -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d @api_request.json)
        
        echo "HTTP Status: $HTTP_STATUS"
        
        if [ "$HTTP_STATUS" = "200" ]; then
          # Extract the analysis from the response
          ANALYSIS=$(grep -o '"content":"[^"]*"' api_response.json | sed 's/"content":"//; s/"$//' | sed 's/\\n/\n/g' | sed 's/\\"/"/g')
          
          if [ -n "$ANALYSIS" ]; then
            echo "✅ AI analysis completed successfully"
            echo "Analysis result:"
            echo "$ANALYSIS"
            echo "$ANALYSIS" > panda_analysis.txt
          else
            echo "❌ Failed to extract analysis from API response"
            echo "Response content:"
            cat api_response.json
            ANALYSIS="❌ Failed to extract analysis from API response"
            echo "$ANALYSIS" > panda_analysis.txt
          fi
        else
          echo "❌ API call failed with status: $HTTP_STATUS"
          if [ "$HTTP_STATUS" = "404" ]; then
            ANALYSIS="❌ API Error 404: The endpoint path '/chat/completions' was not found. Please check your OPENAI_API_ENDPOINT secret."
          elif [ "$HTTP_STATUS" = "401" ]; then
            ANALYSIS="❌ API Error 401: Unauthorized. Please check your OPENAI_API_KEY secret."
          else
            ANALYSIS="❌ API Error $HTTP_STATUS: $(cat api_response.json 2>/dev/null || echo 'Unknown error')"
          fi
          echo "$ANALYSIS" > panda_analysis.txt
        fi

    - name: Update actionsblog.md with panda status
      run: |
        set -euo pipefail
        echo "📝 Updating actionsblog.md with panda cam analysis..."
        
        ANALYSIS=$(cat panda_analysis.txt)
        TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
        
        # Remove any existing panda cam section
        if grep -q "## 🐼 Live Panda Cam Analysis" webpage/actionsblog.md; then
          # Remove from the panda cam section to the end of file
          sed -i '/## 🐼 Live Panda Cam Analysis/,$d' webpage/actionsblog.md
        fi
        
        # Add new panda cam section
        {
          echo ""
          echo "## 🐼 Live Panda Cam Analysis"
          echo ""
          echo "*This section is automatically updated every 30 minutes during zoo hours using AI vision analysis.*"
          echo ""
          echo "**Last Updated:** $TIMESTAMP"
          echo ""
          echo "$ANALYSIS"
          echo ""
          echo "$(printf '%s' '---')"
          echo ""
          echo "*Powered by GitHub Actions + GitHub Models multimodal AI*"
          echo ""
          echo "$(printf '%s' '---')"
          echo ""
          echo "🔗 Check out the examples: [github.com/robertefreeman/GH-Models-actions-examples](https://github.com/robertefreeman/GH-Models-actions-examples)"
          echo ""
          echo "#GitHubActions #AI #DevOps #Automation #OpenAI #GitHubModels #CICD #DeveloperTools #PandaCam #ComputerVision"
        } >> webpage/actionsblog.md

        echo "✅ actionsblog.md updated successfully"

    - name: Update website index.html with latest content
      run: |
        set -euo pipefail
        echo "🌐 Updating website with latest blog content..."
        
        # Check if the current index.html needs updating with panda cam content
        # We'll add a simple update to indicate the blog has new content
        if ! grep -q "Live Panda Cam Analysis" index.html; then
          # Add a note about the panda cam feature in the website
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
          
          # Add panda cam info to the "What's Next?" section
          sed -i '/The possibilities are endless! You could extend these concepts to:/a\
                <li>🐼 Monitor live webcams with AI vision analysis (like our panda cam example!)</li>' index.html
        fi
        
        echo "✅ Website updated successfully"

    - name: Commit and push changes
      run: |
        set -euo pipefail
        echo "📤 Committing panda cam analysis updates..."
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "Panda Cam AI Monitor"
        
        # Add changes
        git add webpage/actionsblog.md index.html
        
        # Check if there are changes to commit
        if ! git diff --staged --quiet; then
          # Create commit message with panda status
          PANDA_STATUS="Unknown"
          if grep -q "Panda Status.*Present" panda_analysis.txt; then
            PANDA_STATUS="🐼 Panda spotted!"
          elif grep -q "Panda Status.*Not Visible" panda_analysis.txt; then
            PANDA_STATUS="🌿 No panda visible"
          fi
          
          # Create multi-line commit message
          git commit -m "🐼 Panda Cam Update: $PANDA_STATUS" \
                     -m "Automated AI analysis of National Zoo panda webcam" \
                     -m "Updated actionsblog.md with latest panda status" \
                     -m "Analysis timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')" \
                     -m "Powered by GitHub Models multimodal AI" \
                     -m "[skip ci]"
          
          # Push changes with retry logic
          for i in {1..3}; do
            if git push origin main; then
              echo "✅ Changes pushed successfully"
              break
            else
              echo "⚠️ Push attempt $i failed, retrying..."
              if [ $i -eq 3 ]; then
                echo "❌ Failed to push after 3 attempts"
                exit 1
              fi
              sleep 5
            fi
          done
        else
          echo "ℹ️ No changes to commit"
        fi

    - name: Create panda watch summary
      run: |
        echo "## 🐼 Panda Cam Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### AI Analysis Result:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        cat panda_analysis.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 [View Updated Blog](https://github.com/${{ github.repository }}/blob/main/webpage/actionsblog.md)" >> $GITHUB_STEP_SUMMARY

    - name: Cleanup
      run: |
        # Clean up temporary files
        rm -f screenshots/panda_cam_base64.txt api_request.json api_response.json panda_analysis.txt
        echo "🧹 Cleanup completed"
