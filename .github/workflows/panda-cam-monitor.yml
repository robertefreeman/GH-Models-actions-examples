name: Panda Cam AI Monitor

on:
  schedule:
    # Run every 30 minutes during zoo hours (9 AM - 6 PM EST)
    - cron: '*/30 13-22 * * *'  # UTC time
  workflow_dispatch:

jobs:
  panda-watch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser imagemagick

    - name: Capture panda cam screenshot
      run: |
        set -euo pipefail
        echo "🐼 Capturing screenshot from National Zoo panda cam..."
        
        # Create screenshots directory
        mkdir -p screenshots
        
        # Method 1: Try to get the actual webcam feed URL by analyzing the page structure
        echo "🔍 Analyzing National Zoo webcam page structure..."
        
        # Download the webpage and look for embedded video sources
        curl -s -L "https://nationalzoo.si.edu/webcams/panda-cam" > webpage.html
        
        # Look for various webcam patterns in the HTML
        echo "📡 Searching for webcam streams..."
        
        # Check for YouTube live streams (most likely for National Zoo)
        YOUTUBE_ID=$(grep -oE 'youtube\.com/embed/[a-zA-Z0-9_-]+' webpage.html | sed 's/.*embed\///' | head -1 || echo "")
        if [ -n "$YOUTUBE_ID" ]; then
          echo "Found YouTube stream: $YOUTUBE_ID"
          # For YouTube, we'll use youtube-dl or a screenshot approach
          YOUTUBE_URL="https://www.youtube.com/watch?v=$YOUTUBE_ID"
          echo "YouTube URL: $YOUTUBE_URL"
        fi
        
        # Look for direct video streams
        VIDEO_STREAM=$(grep -oE 'https?://[^"'\''[:space:]]+\.(m3u8|mp4)[^"'\''[:space:]]*' webpage.html | head -1 || echo "")
        if [ -n "$VIDEO_STREAM" ]; then
          echo "Found video stream: $VIDEO_STREAM"
        fi
        
        # Look for direct image feeds
        CAM_IMAGE=$(grep -oE 'https?://[^"'\''[:space:]]+\.(jpg|jpeg|png)[^"'\''[:space:]]*' webpage.html | grep -iE '(cam|live|panda|stream)' | head -1 || echo "")
        if [ -n "$CAM_IMAGE" ]; then
          echo "Found camera image: $CAM_IMAGE"
        fi
        
        # Method 2: Try known National Zoo webcam endpoints
        echo "🎯 Trying known webcam endpoints..."
        
        WEBCAM_URLS=(
          "https://www.zoo.si.edu/sites/default/files/webcams/panda-cam.jpg"
          "https://nationalzoo.si.edu/sites/default/files/webcams/panda-cam.jpg"
          "https://s3.amazonaws.com/nationalzoo-webcams/panda-cam.jpg"
          "https://assets.nationalzoo.si.edu/webcams/panda-cam.jpg"
          "$CAM_IMAGE"
        )
        
        SUCCESS=false
        for url in "${WEBCAM_URLS[@]}"; do
          if [ -n "$url" ]; then
            echo "Trying: $url"
            if curl -f -L -o screenshots/panda_cam.png "$url" 2>/dev/null && [ -s screenshots/panda_cam.png ]; then
              echo "✅ Successfully captured from: $url"
              SUCCESS=true
              break
            fi
          fi
        done
        
        # Method 3: Use headless browser with better approach for YouTube or complex sites
        if [ "$SUCCESS" = false ] && [ -n "$YOUTUBE_ID" ]; then
          echo "🌐 Using browser to capture YouTube livestream..."
          
          # Create a simple HTML page that embeds the YouTube video
          cat > youtube_embed.html << EOF
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body { margin: 0; padding: 0; background: black; }
                iframe { width: 100vw; height: 100vh; border: none; }
            </style>
        </head>
        <body>
            <iframe src="https://www.youtube.com/embed/${YOUTUBE_ID}?autoplay=1&mute=1" allowfullscreen></iframe>
        </body>
        </html>
        EOF
          
          # Use browser to screenshot the embedded video
          timeout 60s chromium-browser \
            --headless \
            --disable-gpu \
            --no-sandbox \
            --disable-dev-shm-usage \
            --disable-web-security \
            --autoplay-policy=no-user-gesture-required \
            --window-size=1280,720 \
            --screenshot=screenshots/panda_cam.png \
            --virtual-time-budget=20000 \
            file://$(pwd)/youtube_embed.html 2>/dev/null || true
            
          if [ -s screenshots/panda_cam.png ]; then
            echo "✅ YouTube screenshot captured"
            SUCCESS=true
          fi
        fi
        
        # Method 4: Fallback to a working placeholder that looks like a webcam
        if [ "$SUCCESS" = false ]; then
          echo "🔄 Using fallback image sources..."
          
          FALLBACK_URLS=(
            "https://nationalzoo.si.edu/sites/default/files/animals/giant-panda-mei-xiang-1.jpg"
            "https://nationalzoo.si.edu/sites/default/files/animals/pandacam-thumb.jpg"
            "https://images.unsplash.com/photo-1564349683136-77e08dba1ef7?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
          )
          
          for url in "${FALLBACK_URLS[@]}"; do
            echo "Trying fallback: $url"
            if curl -f -L -o screenshots/panda_cam.png "$url" 2>/dev/null && [ -s screenshots/panda_cam.png ]; then
              echo "✅ Fallback image captured: $url"
              SUCCESS=true
              break
            fi
          done
        fi
        
        # Final verification
        if [ -f screenshots/panda_cam.png ] && [ -s screenshots/panda_cam.png ]; then
          echo "✅ Screenshot captured successfully"
          ls -la screenshots/panda_cam.png
          file screenshots/panda_cam.png
        else
          echo "❌ All capture methods failed"
          # Create a simple error image as last resort
          echo "Creating error placeholder..."
          convert -size 800x600 xc:lightgray -pointsize 36 -fill black -gravity center \
            -annotate +0+0 "Panda Cam\nTemporarily\nUnavailable" screenshots/panda_cam.png || {
            echo "❌ Could not create placeholder image"
            exit 1
          }
        fi
        
        # Cleanup
        rm -f webpage.html youtube_embed.html

    - name: Convert image to base64
      run: |
        set -euo pipefail
        echo "🔄 Converting image to base64..."
        
        # First, let's examine what we captured
        echo "📊 Image file details:"
        ls -la screenshots/panda_cam.png
        file screenshots/panda_cam.png
        
        # Check image dimensions if possible
        if command -v identify >/dev/null 2>&1; then
          identify screenshots/panda_cam.png
        fi
        
        # Convert image to base64
        base64 -w 0 screenshots/panda_cam.png > screenshots/panda_cam_base64.txt
        
        # Check if conversion was successful
        if [ -s screenshots/panda_cam_base64.txt ]; then
          echo "✅ Image converted to base64"
          echo "Base64 length: $(wc -c < screenshots/panda_cam_base64.txt) characters"
          
          # Verify base64 starts correctly (should start with data type indicator)
          echo "Base64 starts with: $(head -c 50 screenshots/panda_cam_base64.txt)..."
        else
          echo "❌ Base64 conversion failed"
          exit 1
        fi

    - name: Analyze image with AI
      run: |
        set -euo pipefail
        echo "🤖 Analyzing panda cam image with AI..."
        echo "Timestamp: $(date)"
        echo "Model: ${{ secrets.OPENAI_MODEL || 'gpt-4o' }}"
        echo "Endpoint: ${{ secrets.OPENAI_API_ENDPOINT }}"
        
        # Read base64 image
        IMAGE_BASE64=$(cat screenshots/panda_cam_base64.txt)
        
        # Create the API request payload
        cat > api_request.json << EOF
        {
          "model": "${{ secrets.OPENAI_MODEL || 'gpt-4o' }}",
          "messages": [
            {
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": "Analyze this image related to the National Zoo panda webcam. Please provide a detailed analysis:\n\n**Image Source:** [Live Webcam/Static Photo/YouTube Stream/Error Message/Other]\n**Panda Status:** [Present/Not Visible/Cannot Determine]\n**Activity:** [What the panda is doing, if visible]\n**Scene Description:** [Detailed description of what's visible]\n**Image Quality:** [Live Feed/High Quality Photo/Low Quality/Placeholder/Error]\n**Confidence:** [High/Medium/Low]\n\nNote: This image may be from a live webcam feed, a static photo, a YouTube livestream screenshot, or a fallback image. Please identify which type it appears to be and analyze accordingly. If you see pandas, describe their behavior in detail. If it's not a live feed, please note what type of image it appears to be."
                },
                {
                  "type": "image_url",
                  "image_url": {
                    "url": "data:image/png;base64,${IMAGE_BASE64}"
                  }
                }
              ]
            }
          ],
          "max_tokens": 300,
          "temperature": 0.3
        }
        EOF
        
        # Make API call with proper error handling
        echo "Making API call..."
        HTTP_STATUS=$(curl -s -w "%{http_code}" -X POST "${{ secrets.OPENAI_API_ENDPOINT }}/chat/completions" \
          -o api_response.json \
          -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d @api_request.json)
        
        echo "HTTP Status: $HTTP_STATUS"
        
        if [ "$HTTP_STATUS" = "200" ]; then
          # Extract the analysis from the response
          ANALYSIS=$(grep -o '"content":"[^"]*"' api_response.json | sed 's/"content":"//; s/"$//' | sed 's/\\n/\n/g' | sed 's/\\"/"/g')
          
          if [ -n "$ANALYSIS" ]; then
            echo "✅ AI analysis completed successfully"
            echo "Analysis result:"
            echo "$ANALYSIS"
            echo "$ANALYSIS" > panda_analysis.txt
          else
            echo "❌ Failed to extract analysis from API response"
            echo "Response content:"
            cat api_response.json
            ANALYSIS="❌ Failed to extract analysis from API response"
            echo "$ANALYSIS" > panda_analysis.txt
          fi
        else
          echo "❌ API call failed with status: $HTTP_STATUS"
          if [ "$HTTP_STATUS" = "404" ]; then
            ANALYSIS="❌ API Error 404: The endpoint path '/chat/completions' was not found. Please check your OPENAI_API_ENDPOINT secret."
          elif [ "$HTTP_STATUS" = "401" ]; then
            ANALYSIS="❌ API Error 401: Unauthorized. Please check your OPENAI_API_KEY secret."
          else
            ANALYSIS="❌ API Error $HTTP_STATUS: $(cat api_response.json 2>/dev/null || echo 'Unknown error')"
          fi
          echo "$ANALYSIS" > panda_analysis.txt
        fi

    - name: Update actionsblog.md with panda status
      run: |
        set -euo pipefail
        echo "📝 Updating actionsblog.md with panda cam analysis..."
        
        ANALYSIS=$(cat panda_analysis.txt)
        TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
        
        # Remove any existing panda cam section
        if grep -q "## 🐼 Live Panda Cam Analysis" webpage/actionsblog.md; then
          # Remove from the panda cam section to the end of file
          sed -i '/## 🐼 Live Panda Cam Analysis/,$d' webpage/actionsblog.md
        fi
        
        # Add new panda cam section
        {
          echo ""
          echo "## 🐼 Live Panda Cam Analysis"
          echo ""
          echo "*This section is automatically updated every 30 minutes during zoo hours using AI vision analysis.*"
          echo ""
          echo "**Last Updated:** $TIMESTAMP"
          echo ""
          echo "$ANALYSIS"
          echo ""
          echo "$(printf '%s' '---')"
          echo ""
          echo "*Powered by GitHub Actions + GitHub Models multimodal AI*"
          echo ""
          echo "$(printf '%s' '---')"
          echo ""
          echo "🔗 Check out the examples: [github.com/robertefreeman/GH-Models-actions-examples](https://github.com/robertefreeman/GH-Models-actions-examples)"
          echo ""
          echo "#GitHubActions #AI #DevOps #Automation #OpenAI #GitHubModels #CICD #DeveloperTools #PandaCam #ComputerVision"
        } >> webpage/actionsblog.md

        echo "✅ actionsblog.md updated successfully"

    - name: Update website index.html with latest content
      run: |
        set -euo pipefail
        echo "🌐 Updating website with latest blog content..."
        
        # Check if the current index.html needs updating with panda cam content
        # We'll add a simple update to indicate the blog has new content
        if ! grep -q "Live Panda Cam Analysis" index.html; then
          # Add a note about the panda cam feature in the website
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
          
          # Add panda cam info to the "What's Next?" section
          sed -i '/The possibilities are endless! You could extend these concepts to:/a\
                <li>🐼 Monitor live webcams with AI vision analysis (like our panda cam example!)</li>' index.html
        fi
        
        echo "✅ Website updated successfully"

    - name: Commit and push changes
      run: |
        set -euo pipefail
        echo "📤 Committing panda cam analysis updates..."
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "Panda Cam AI Monitor"
        
        # Add changes
        git add webpage/actionsblog.md index.html
        
        # Check if there are changes to commit
        if ! git diff --staged --quiet; then
          # Create commit message with panda status
          PANDA_STATUS="Unknown"
          if grep -q "Panda Status.*Present" panda_analysis.txt; then
            PANDA_STATUS="🐼 Panda spotted!"
          elif grep -q "Panda Status.*Not Visible" panda_analysis.txt; then
            PANDA_STATUS="🌿 No panda visible"
          fi
          
          # Create multi-line commit message
          git commit -m "🐼 Panda Cam Update: $PANDA_STATUS" \
                     -m "Automated AI analysis of National Zoo panda webcam" \
                     -m "Updated actionsblog.md with latest panda status" \
                     -m "Analysis timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')" \
                     -m "Powered by GitHub Models multimodal AI" \
                     -m "[skip ci]"
          
          # Push changes with retry logic
          for i in {1..3}; do
            if git push origin main; then
              echo "✅ Changes pushed successfully"
              break
            else
              echo "⚠️ Push attempt $i failed, retrying..."
              if [ $i -eq 3 ]; then
                echo "❌ Failed to push after 3 attempts"
                exit 1
              fi
              sleep 5
            fi
          done
        else
          echo "ℹ️ No changes to commit"
        fi

    - name: Create panda watch summary
      run: |
        echo "## 🐼 Panda Cam Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### AI Analysis Result:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        cat panda_analysis.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 [View Updated Blog](https://github.com/${{ github.repository }}/blob/main/webpage/actionsblog.md)" >> $GITHUB_STEP_SUMMARY

    - name: Cleanup
      run: |
        # Clean up temporary files
        rm -f screenshots/panda_cam_base64.txt api_request.json api_response.json panda_analysis.txt
        echo "🧹 Cleanup completed"
