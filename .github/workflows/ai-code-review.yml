name: AI Code Complexity Analyzer v2

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      file_limit:
        description: 'Maximum number of files to analyze'
        required: false
        default: '5'
        type: string

jobs:
  analyze:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Find JavaScript files
      id: find_files
      run: |
        # Find all JS files (limit based on input or default to 5)
        LIMIT=${{ github.event.inputs.file_limit || '5' }}
        FILES=$(find . -name "*.js" -type f | head -$LIMIT | tr '\n' ' ')
        echo "files=$FILES" >> $GITHUB_OUTPUT

    - name: Analyze with AI
      run: |
        set -euo pipefail
        # Initialize results file
        echo "# ü§ñ AI Code Complexity Analysis" > analysis_results.md
        echo "" >> analysis_results.md
        echo "Generated on: $(date)" >> analysis_results.md
        echo "" >> analysis_results.md
        
        # Analyze each file
        for file in ${{ steps.find_files.outputs.files }}; do
          if [ ! -s "$file" ]; then
            echo "Skipping empty or unreadable file: $file"
            continue
          fi
          echo "Analyzing $file..."
          
          # Debug: show first few lines of file
          echo "First 5 lines of $file:"
          head -n 5 "$file"
          echo "---"
          
          # Create a simple analysis without complex JSON escaping
          echo "Creating analysis for $file..."
          
          # Use a simple approach - write to temp files
          echo "Analyze the code complexity and provide a brief assessment including: complexity score (1-10), main concerns, and improvement suggestions. Be concise." > system_prompt.txt
          echo "Please analyze this JavaScript code for complexity:" > user_prompt.txt
          head -n 50 "$file" >> user_prompt.txt
          
          # Create JSON using printf to avoid escaping issues  
          printf '{"model":"%s","messages":[{"role":"system","content":"%s"},{"role":"user","content":"%s"}],"temperature":0.3,"max_tokens":200}' \
            "${{ secrets.OPENAI_MODEL }}" \
            "$(cat system_prompt.txt)" \
            "$(cat user_prompt.txt | tr '\n' ' ' | sed 's/"/\\"/g')" > request.json
          
          # Call API and save response
          echo "Calling API..."
          echo "Endpoint: ${{ secrets.OPENAI_API_ENDPOINT }}"
          echo "Model: ${{ secrets.OPENAI_MODEL }}"
          
          # Show the request being sent (without the auth header)
          echo "Request JSON:"
          cat request.json
          echo ""
          
          HTTP_STATUS=$(curl -s -w "%{http_code}" -X POST "${{ secrets.OPENAI_API_ENDPOINT }}/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d @request.json -o api_response.json)
          
          echo "HTTP Status: $HTTP_STATUS"
          echo "API Response:"
          cat api_response.json
          echo "---"
          
          # Check if we got a successful response
          if [ "$HTTP_STATUS" != "200" ]; then
            if grep -q '"code":"404"' api_response.json; then
              ANALYSIS="‚ùå API Error 404: The endpoint path '/chat/completions' was not found. Please check your OPENAI_API_ENDPOINT secret. For GitHub Models, try 'https://models.inference.ai.azure.com' or the correct endpoint from your GitHub Models dashboard."
            else
              ANALYSIS="‚ùå API call failed with HTTP status $HTTP_STATUS. Check your API endpoint and credentials in repository secrets."
            fi
          elif grep -q "<!DOCTYPE html>" api_response.json; then
            ANALYSIS="‚ùå Received HTML instead of JSON. This might be a Cloudflare challenge or incorrect endpoint."
          elif grep -q '"error"' api_response.json; then
            ERROR_MSG=$(grep -o '"message"[^"]*"[^"]*"' api_response.json | sed 's/"message"[^"]*"//' | sed 's/"$//' | sed 's/^"//')
            ANALYSIS="‚ùå API Error: $ERROR_MSG"
          else
            # Try to extract the content
            ANALYSIS=$(grep -o '"content":"[^"]*"' api_response.json | head -1 | sed 's/"content":"//' | sed 's/"$//')
            
            # If grep failed, try a different approach
            if [ -z "$ANALYSIS" ]; then
              ANALYSIS=$(cat api_response.json | sed -n 's/.*"content":"\([^"]*\)".*/\1/p' | head -1)
            fi
            
            # Final fallback
            if [ -z "$ANALYSIS" ]; then
              ANALYSIS="‚ùå Could not parse valid API response - see workflow logs for details"
            fi
          fi
          # Append to results
          echo "## File: \`$file\`" >> analysis_results.md
          echo "" >> analysis_results.md
          echo "$ANALYSIS" >> analysis_results.md
          echo "" >> analysis_results.md
          echo "---" >> analysis_results.md
          echo "" >> analysis_results.md
        done

    - name: Upload analysis results
      uses: actions/upload-artifact@v4
      with:
        name: ai-analysis
        path: analysis_results.md

    - name: Commit analysis results to repo
      run: |
        # Configure git
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        # Create analysis directory if it doesn't exist
        mkdir -p analysis_reports
        
        # Move the analysis file with timestamp
        TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
        mv analysis_results.md "analysis_reports/code_analysis_${TIMESTAMP}.md"
        
        # Add and commit the file
        git add analysis_reports/
        git commit -m "Add AI code complexity analysis - ${TIMESTAMP}" || echo "No changes to commit"
        git push || echo "Failed to push - check repository permissions"

    - name: Comment on commit (optional)
      if: github.event_name == 'push'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          try {
            const analysis = fs.readFileSync('analysis_results.md', 'utf8');
            
            // Create a comment on the commit
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: analysis
            });
          } catch (error) {
            console.log('Failed to create commit comment:', error.message);
            console.log('Analysis results uploaded as artifact instead.');
          }
