name: Panda Cam AI Monitor

on:
  schedule:
    # Run every 30 minutes during zoo hours (9 AM - 6 PM EST)
    - cron: '*/30 13-22 * * *'  # UTC time
  workflow_dispatch:

jobs:
  panda-watch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser

    - name: Capture panda cam screenshot
      run: |
        set -euo pipefail
        echo "üêº Capturing screenshot from National Zoo panda cam..."
        
        # Create screenshots directory
        mkdir -p screenshots
        
        # Use headless chromium to capture screenshot
        timeout 30s chromium-browser --headless --disable-gpu --no-sandbox --disable-dev-shm-usage \
          --window-size=1920,1080 \
          --screenshot=screenshots/panda_cam.png \
          "https://nationalzoo.si.edu/webcams/panda-cam" || {
          echo "‚ùå Failed to capture screenshot - using fallback method"
          
          # Fallback: try to get direct image URL (this might need adjustment based on actual site structure)
          curl -L -o screenshots/panda_cam.png "https://nationalzoo.si.edu/webcams/panda-cam" || {
            echo "‚ùå Both screenshot methods failed"
            exit 1
          }
        }
        
        # Verify screenshot was created and has content
        if [ -f screenshots/panda_cam.png ] && [ -s screenshots/panda_cam.png ]; then
          echo "‚úÖ Screenshot captured successfully"
          ls -la screenshots/panda_cam.png
        else
          echo "‚ùå Screenshot capture failed"
          exit 1
        fi

    - name: Convert image to base64
      run: |
        set -euo pipefail
        echo "üîÑ Converting image to base64..."
        
        # Convert image to base64
        base64 -w 0 screenshots/panda_cam.png > screenshots/panda_cam_base64.txt
        
        # Check if conversion was successful
        if [ -s screenshots/panda_cam_base64.txt ]; then
          echo "‚úÖ Image converted to base64"
          echo "Base64 length: $(wc -c < screenshots/panda_cam_base64.txt) characters"
        else
          echo "‚ùå Base64 conversion failed"
          exit 1
        fi

    - name: Analyze image with AI
      run: |
        set -euo pipefail
        echo "ü§ñ Analyzing panda cam image with AI..."
        echo "Timestamp: $(date)"
        echo "Model: ${{ secrets.OPENAI_MODEL || 'gpt-4o' }}"
        echo "Endpoint: ${{ secrets.OPENAI_API_ENDPOINT }}"
        
        # Read base64 image
        IMAGE_BASE64=$(cat screenshots/panda_cam_base64.txt)
        
        # Create the API request payload
        cat > api_request.json << EOF
        {
          "model": "${{ secrets.OPENAI_MODEL || 'gpt-4o' }}",
          "messages": [
            {
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": "Analyze this image from the National Zoo panda webcam. Please provide a detailed analysis in the following format:\n\n**Panda Status:** [Present/Not Visible]\n**Activity:** [What the panda is doing, if visible]\n**Scene Description:** [Brief description of what's visible in the image]\n**Confidence:** [High/Medium/Low]\n\nBe specific about panda behavior if one is visible (sleeping, eating, playing, climbing, etc.). If no panda is visible, describe what is shown instead (empty enclosure, habitat features, etc.)."
                },
                {
                  "type": "image_url",
                  "image_url": {
                    "url": "data:image/png;base64,${IMAGE_BASE64}"
                  }
                }
              ]
            }
          ],
          "max_tokens": 300,
          "temperature": 0.3
        }
        EOF
        
        # Make API call with proper error handling
        echo "Making API call..."
        HTTP_STATUS=$(curl -s -w "%{http_code}" -X POST "${{ secrets.OPENAI_API_ENDPOINT }}/chat/completions" \
          -o api_response.json \
          -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d @api_request.json)
        
        echo "HTTP Status: $HTTP_STATUS"
        
        if [ "$HTTP_STATUS" = "200" ]; then
          # Extract the analysis from the response
          ANALYSIS=$(grep -o '"content":"[^"]*"' api_response.json | sed 's/"content":"//; s/"$//' | sed 's/\\n/\n/g' | sed 's/\\"/"/g')
          
          if [ -n "$ANALYSIS" ]; then
            echo "‚úÖ AI analysis completed successfully"
            echo "Analysis result:"
            echo "$ANALYSIS"
            echo "$ANALYSIS" > panda_analysis.txt
          else
            echo "‚ùå Failed to extract analysis from API response"
            echo "Response content:"
            cat api_response.json
            ANALYSIS="‚ùå Failed to extract analysis from API response"
            echo "$ANALYSIS" > panda_analysis.txt
          fi
        else
          echo "‚ùå API call failed with status: $HTTP_STATUS"
          if [ "$HTTP_STATUS" = "404" ]; then
            ANALYSIS="‚ùå API Error 404: The endpoint path '/chat/completions' was not found. Please check your OPENAI_API_ENDPOINT secret."
          elif [ "$HTTP_STATUS" = "401" ]; then
            ANALYSIS="‚ùå API Error 401: Unauthorized. Please check your OPENAI_API_KEY secret."
          else
            ANALYSIS="‚ùå API Error $HTTP_STATUS: $(cat api_response.json 2>/dev/null || echo 'Unknown error')"
          fi
          echo "$ANALYSIS" > panda_analysis.txt
        fi

    - name: Update actionsblog.md with panda status
      run: |
        set -euo pipefail
        echo "üìù Updating actionsblog.md with panda cam analysis..."
        
        ANALYSIS=$(cat panda_analysis.txt)
        TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
        
        # Remove any existing panda cam section
        if grep -q "## üêº Live Panda Cam Analysis" webpage/actionsblog.md; then
          # Remove from the panda cam section to the end of file
          sed -i '/## üêº Live Panda Cam Analysis/,$d' webpage/actionsblog.md
        fi
        
        # Add new panda cam section
        {
          echo ""
          echo "## üêº Live Panda Cam Analysis"
          echo ""
          echo "*This section is automatically updated every 30 minutes during zoo hours using AI vision analysis.*"
          echo ""
          echo "**Last Updated:** $TIMESTAMP"
          echo ""
          echo "$ANALYSIS"
          echo ""
          echo "$(printf '%s' '---')"
          echo ""
          echo "*Powered by GitHub Actions + GitHub Models multimodal AI*"
          echo ""
          echo "$(printf '%s' '---')"
          echo ""
          echo "üîó Check out the examples: [github.com/robertefreeman/GH-Models-actions-examples](https://github.com/robertefreeman/GH-Models-actions-examples)"
          echo ""
          echo "#GitHubActions #AI #DevOps #Automation #OpenAI #GitHubModels #CICD #DeveloperTools #PandaCam #ComputerVision"
        } >> webpage/actionsblog.md

        echo "‚úÖ actionsblog.md updated successfully"

    - name: Update website index.html with latest content
      run: |
        set -euo pipefail
        echo "üåê Updating website with latest blog content..."
        
        # Check if the current index.html needs updating with panda cam content
        # We'll add a simple update to indicate the blog has new content
        if ! grep -q "Live Panda Cam Analysis" index.html; then
          # Add a note about the panda cam feature in the website
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
          
          # Add panda cam info to the "What's Next?" section
          sed -i '/The possibilities are endless! You could extend these concepts to:/a\
                <li>üêº Monitor live webcams with AI vision analysis (like our panda cam example!)</li>' index.html
        fi
        
        echo "‚úÖ Website updated successfully"

    - name: Commit and push changes
      run: |
        set -euo pipefail
        echo "üì§ Committing panda cam analysis updates..."
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "Panda Cam AI Monitor"
        
        # Add changes
        git add webpage/actionsblog.md index.html
        
        # Check if there are changes to commit
        if ! git diff --staged --quiet; then
          # Create commit message with panda status
          PANDA_STATUS="Unknown"
          if grep -q "Panda Status.*Present" panda_analysis.txt; then
            PANDA_STATUS="üêº Panda spotted!"
          elif grep -q "Panda Status.*Not Visible" panda_analysis.txt; then
            PANDA_STATUS="üåø No panda visible"
          fi
          
          COMMIT_MSG="üêº Panda Cam Update: $PANDA_STATUS

Automated AI analysis of National Zoo panda webcam
Updated actionsblog.md with latest panda status
Analysis timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')
Powered by GitHub Models multimodal AI

[skip ci]"
          
          git commit -m "$COMMIT_MSG"
          
          # Push changes with retry logic
          for i in {1..3}; do
            if git push origin main; then
              echo "‚úÖ Changes pushed successfully"
              break
            else
              echo "‚ö†Ô∏è Push attempt $i failed, retrying..."
              if [ $i -eq 3 ]; then
                echo "‚ùå Failed to push after 3 attempts"
                exit 1
              fi
              sleep 5
            fi
          done
        else
          echo "‚ÑπÔ∏è No changes to commit"
        fi

    - name: Create panda watch summary
      run: |
        echo "## üêº Panda Cam Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### AI Analysis Result:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        cat panda_analysis.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üîó [View Updated Blog](https://github.com/${{ github.repository }}/blob/main/webpage/actionsblog.md)" >> $GITHUB_STEP_SUMMARY

    - name: Cleanup
      run: |
        # Clean up temporary files
        rm -f screenshots/panda_cam_base64.txt api_request.json api_response.json panda_analysis.txt
        echo "üßπ Cleanup completed"
