name: Panda Cam AI Monitor

on:
  schedule:
    # Run every 30 minutes during zoo hours (9 AM - 6 PM EST)
    - cron: '*/30 13-22 * * *'  # UTC time
  workflow_dispatch:

jobs:
  panda-watch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser imagemagick ffmpeg python3-pip curl
        
        # Install Python packages
        pip3 install requests

    - name: Capture panda webcam screenshot
      run: |
        echo "🐼 Attempting to capture panda webcam with enhanced strategies..."
        
        # Create enhanced capture script with better error handling
        cat > enhanced_capture.py << 'EOF'
        import time
        import os
        import requests
        import subprocess
        import random
        import logging
        from urllib.parse import urljoin
        
        # Set up logging
        logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
        logger = logging.getLogger(__name__)
        
        def get_random_headers():
            """Generate realistic browser headers"""
            user_agents = [
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0',
                'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.2 Safari/605.1.15',
                'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            ]
            
            return {
                'User-Agent': random.choice(user_agents),
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
                'Accept-Language': 'en-US,en;q=0.9',
                'Accept-Encoding': 'gzip, deflate, br',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
                'Sec-Fetch-Dest': 'document',
                'Sec-Fetch-Mode': 'navigate',
                'Sec-Fetch-Site': 'none',
                'Cache-Control': 'max-age=0'
            }
        
        def try_zoo_webcam(url, name, delay=2):
            """Try to access a zoo webcam with proper error handling"""
            try:
                logger.info(f"Attempting {name}...")
                headers = get_random_headers()
                
                # Add random delay to avoid rate limiting
                time.sleep(random.uniform(1, delay))
                
                response = requests.get(url, headers=headers, timeout=15, allow_redirects=True)
                logger.info(f"{name}: HTTP {response.status_code}")
                
                if response.status_code == 200:
                    logger.info(f"✅ {name} is accessible")
                    return response.text
                elif response.status_code == 403:
                    logger.warning(f"🚫 {name}: Access forbidden (bot detection)")
                    return None
                elif response.status_code == 503:
                    logger.warning(f"⚠️ {name}: Service temporarily unavailable")
                    return None
                else:
                    logger.warning(f"❌ {name}: HTTP {response.status_code}")
                    return None
                    
            except requests.exceptions.Timeout:
                logger.warning(f"⏰ {name}: Request timeout")
                return None
            except requests.exceptions.ConnectionError:
                logger.warning(f"🔌 {name}: Connection error")
                return None
            except Exception as e:
                logger.error(f"❌ {name}: {e}")
                return None
        
        def create_panda_image(image_type="unavailable", status_info=""):
            """Create a descriptive image when webcam is unavailable"""
            try:
                current_time = time.strftime("%H:%M UTC", time.gmtime())
                
                if image_type == "unavailable":
                    text = f"🐼 Panda Cam\\nTemporarily\\nUnavailable\\n\\n(Access restricted)\\n{current_time}"
                    bg_color = "lightblue"
                    text_color = "darkblue"
                elif image_type == "rate_limited":
                    text = f"🐼 Panda Cam\\nRate Limited\\n\\nTrying again soon\\n{current_time}"
                    bg_color = "lightyellow"
                    text_color = "darkorange"
                elif image_type == "maintenance":
                    text = f"🐼 Panda Cam\\nMaintenance\\n\\nCheck back later\\n{current_time}"
                    bg_color = "lightgray"
                    text_color = "darkred"
                elif image_type == "accessible":
                    text = f"🐼 Panda Cam\\nConnection\\nSuccessful\\n\\n{status_info}\\n{current_time}"
                    bg_color = "lightgreen"
                    text_color = "darkgreen"
                else:
                    text = f"🐼 Panda Cam\\nTechnical\\nDifficulties\\n\\n{current_time}"
                    bg_color = "lightcoral"
                    text_color = "darkred"
                
                cmd = [
                    'convert', '-size', '800x600', f'xc:{bg_color}',
                    '-pointsize', '28', '-fill', text_color, '-gravity', 'center',
                    '-annotate', '+0+0', text,
                    '-bordercolor', text_color, '-border', '3x3',
                    'panda_cam_frame.png'
                ]
                
                subprocess.run(cmd, check=True)
                logger.info(f"✅ Created {image_type} status image")
                return True
                
            except Exception as e:
                logger.error(f"❌ Failed to create status image: {e}")
                return False
        
        def capture_panda_cam():
            """Main capture function with multiple strategies"""
            
            # Strategy 1: Try National Zoo with different approaches
            zoo_variants = [
                ("National Zoo (main)", "https://nationalzoo.si.edu/webcams/panda-cam"),
                ("National Zoo (mobile)", "https://m.nationalzoo.si.edu/webcams/panda-cam"),
                ("National Zoo (api)", "https://nationalzoo.si.edu/api/webcams/panda"),
                ("National Zoo (alternative)", "https://nationalzoo.si.edu/webcams/elephant-cam"),
            ]
            
            successful_connections = 0
            blocked_connections = 0
            
            for name, url in zoo_variants:
                html_content = try_zoo_webcam(url, name)
                if html_content:
                    successful_connections += 1
                    logger.info(f"✅ Got content from {name}")
                    
                    # Analyze the content briefly
                    if "panda" in html_content.lower():
                        logger.info("Found panda-related content")
                    if "video" in html_content.lower() or "stream" in html_content.lower():
                        logger.info("Found video/stream references")
                    if "live" in html_content.lower():
                        logger.info("Found live content indicators")
                        
                elif "403" in str(html_content):
                    blocked_connections += 1
            
            # Strategy 2: Try alternative zoo sources for comparison
            logger.info("Testing alternative zoo sources...")
            
            alt_sources = [
                ("San Diego Zoo", "https://zoo.sandiegozoo.org/"),
                ("Smithsonian Zoo", "https://nationalzoo.si.edu/"),
            ]
            
            for name, url in alt_sources:
                try_zoo_webcam(url, name, delay=1)
            
            # Strategy 3: Create appropriate status image
            logger.info("📸 Creating status image...")
            
            if successful_connections > 0:
                status_info = f"Connected to {successful_connections} sources"
                return create_panda_image("accessible", status_info)
            elif blocked_connections > 0:
                return create_panda_image("unavailable")
            else:
                return create_panda_image("maintenance")
        
        # Execute the capture
        success = capture_panda_cam()
        
        if not success:
            logger.error("All capture strategies failed!")
            # Create a final fallback image
            try:
                subprocess.run([
                    'convert', '-size', '800x600', 'xc:lightcoral',
                    '-pointsize', '36', '-fill', 'darkred', '-gravity', 'center',
                    '-annotate', '+0+0', 'System Error\\nCould not create\\nstatus image',
                    'panda_cam_frame.png'
                ], check=True)
            except:
                # Ultimate fallback - create a simple file
                with open('panda_cam_frame.png', 'wb') as f:
                    f.write(b'')
            exit(1)
        
        # Verify file was created
        if os.path.exists('panda_cam_frame.png'):
            file_size = os.path.getsize('panda_cam_frame.png')
            logger.info(f"📊 Final image: {file_size} bytes")
            
            # Add metadata to the image
            try:
                subprocess.run([
                    'convert', 'panda_cam_frame.png',
                    '-set', 'comment', f'Panda Cam status via GitHub Actions - {time.strftime("%Y-%m-%d %H:%M:%S UTC")}',
                    'panda_cam_frame.png'
                ], check=True)
                logger.info("✅ Added metadata to image")
            except:
                logger.warning("Could not add metadata (non-critical)")
        else:
            logger.error("❌ No image file was created!")
            exit(1)
        
        logger.info("🎯 Enhanced capture process completed!")
        
        EOF
        
        # Run the enhanced capture script
        python3 enhanced_capture.py

    - name: Convert image to base64
      run: |
        echo "🔄 Converting image to base64..."
        
        # First, let's examine what we captured
        echo "📊 Image file details:"
        ls -la panda_cam_frame.png
        file panda_cam_frame.png
        
        # Check image dimensions if possible
        if command -v identify >/dev/null 2>&1; then
          identify panda_cam_frame.png
        fi
        
        # Convert image to base64
        base64 -w 0 panda_cam_frame.png > panda_cam_base64.txt
        
        # Check if conversion was successful
        if [ -s panda_cam_base64.txt ]; then
          echo "✅ Image converted to base64"
          echo "Base64 length: $(wc -c < panda_cam_base64.txt) characters"
        else
          echo "❌ Base64 conversion failed"
          exit 1
        fi

    - name: Analyze image with AI
      run: |
        echo "🤖 Analyzing panda cam status with AI..."
        echo "Timestamp: $(date)"
        echo "Model: ${{ secrets.OPENAI_MODEL || 'gpt-4o' }}"
        echo "Endpoint: ${{ secrets.OPENAI_API_ENDPOINT }}"
        
        # Read base64 image
        IMAGE_BASE64=$(cat panda_cam_base64.txt)
        
        # Create the API request payload
        cat > api_request.json << EOF
        {
          "model": "${{ secrets.OPENAI_MODEL || 'gpt-4o' }}",
          "messages": [
            {
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": "Analyze this panda cam status image. This is an automated system that monitors zoo webcams and creates status images when the actual video feed is unavailable. Please provide analysis:\n\n**Status:** [Webcam Available/Temporarily Unavailable/Rate Limited/Maintenance/Connection Error]\n**Reason:** [Brief explanation of the current status]\n**Recommendation:** [What users should expect]\n**Technical Note:** [Any technical details visible]\n\n**Blog Summary:** Write a friendly 1-2 sentence update for blog readers about the current panda cam status.\n\nNote: This image was generated by our monitoring system when the live webcam feed was not accessible. Look for status indicators, colors, and text that explain the current situation."
                },
                {
                  "type": "image_url",
                  "image_url": {
                    "url": "data:image/png;base64,${IMAGE_BASE64}"
                  }
                }
              ]
            }
          ],
          "max_tokens": 250,
          "temperature": 0.2
        }
        EOF
        
        # Make API call with proper error handling
        echo "Making API call..."
        HTTP_STATUS=$(curl -s -w "%{http_code}" -X POST "${{ secrets.OPENAI_API_ENDPOINT }}/chat/completions" \
          -o api_response.json \
          -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d @api_request.json)
        
        echo "HTTP Status: $HTTP_STATUS"
        
        if [ "$HTTP_STATUS" = "200" ]; then
          # Extract the analysis from the response
          ANALYSIS=$(grep -o '"content":"[^"]*"' api_response.json | sed 's/"content":"//; s/"$//' | sed 's/\\n/\n/g' | sed 's/\\"/"/g')
          
          if [ -n "$ANALYSIS" ]; then
            echo "✅ AI analysis completed successfully"
            echo "Analysis result:"
            echo "$ANALYSIS"
            echo "$ANALYSIS" > panda_analysis.txt
          else
            echo "❌ Failed to extract analysis from API response"
            ANALYSIS="🤖 AI analysis temporarily unavailable. The panda cam monitoring system is working to provide status updates."
            echo "$ANALYSIS" > panda_analysis.txt
          fi
        else
          echo "❌ API call failed with status: $HTTP_STATUS"
          ANALYSIS="🔧 System Status: Monitoring the National Zoo panda webcam. Updates provided automatically every 30 minutes during zoo hours."
          echo "$ANALYSIS" > panda_analysis.txt
        fi

    - name: Update actionsblog.md with panda status
      run: |
        echo "📝 Updating actionsblog.md with panda cam status..."
        
        ANALYSIS=$(cat panda_analysis.txt)
        TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
        
        # Remove any existing panda cam section
        if grep -q "## 🐼 Live Panda Cam Analysis" webpage/actionsblog.md; then
          sed -i '/## 🐼 Live Panda Cam Analysis/,$d' webpage/actionsblog.md
        fi
        
        # Add new panda cam section
        {
          echo ""
          echo "## 🐼 Live Panda Cam Analysis"
          echo ""
          echo "*This section is automatically updated every 30 minutes during zoo hours using AI-powered monitoring.*"
          echo ""
          echo "**Last Updated:** $TIMESTAMP"
          echo ""
          echo "$ANALYSIS"
          echo ""
          echo "---"
          echo ""
          echo "*🤖 Powered by GitHub Actions + GitHub Models AI*"
          echo ""
          echo "This automated system monitors the National Zoo panda webcam and provides intelligent status updates. When the live feed is unavailable, it creates informative status images and uses AI to analyze the current situation."
          echo ""
          echo "---"
          echo ""
          echo "🔗 **Project Repository:** [github.com/robertefreeman/GH-Models-actions-examples](https://github.com/robertefreeman/GH-Models-actions-examples)"
          echo ""
          echo "#GitHubActions #AI #WebcamMonitoring #Automation #GitHubModels #PandaCam #ComputerVision #DevOps"
        } >> webpage/actionsblog.md

        echo "✅ actionsblog.md updated successfully"

    - name: Update website index.html with latest content
      run: |
        echo "🌐 Updating website with latest content..."
        
        # Add panda cam feature to the website if not already present
        if ! grep -q "Live Panda Cam Analysis" index.html; then
          sed -i '/The possibilities are endless! You could extend these concepts to:/a\
                <li>🐼 <strong>Live Webcam Monitoring</strong> - Monitor zoo webcams with AI status analysis</li>' index.html
        fi
        
        echo "✅ Website updated successfully"

    - name: Commit and push changes
      run: |
        echo "📤 Committing panda cam status updates..."
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "Panda Cam AI Monitor"
        
        # Add changes
        git add webpage/actionsblog.md index.html
        
        # Check if there are changes to commit
        if ! git diff --staged --quiet; then
          # Determine status for commit message
          STATUS_EMOJI="🔄"
          if grep -q "Available" panda_analysis.txt; then
            STATUS_EMOJI="✅"
          elif grep -q "Unavailable\|blocked\|403" panda_analysis.txt; then
            STATUS_EMOJI="🚫"
          elif grep -q "Maintenance" panda_analysis.txt; then
            STATUS_EMOJI="🔧"
          fi
          
          # Create commit message
          git commit -m "${STATUS_EMOJI} Panda Cam Status Update" \
                     -m "Automated monitoring of National Zoo panda webcam" \
                     -m "Status analysis timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')" \
                     -m "Enhanced with intelligent error handling and status reporting" \
                     -m "[skip ci]"
          
          # Push changes with retry logic
          for i in {1..3}; do
            if git push origin main; then
              echo "✅ Changes pushed successfully"
              break
            else
              echo "⚠️ Push attempt $i failed, retrying..."
              if [ $i -eq 3 ]; then
                echo "❌ Failed to push after 3 attempts"
                exit 1
              fi
              sleep 5
            fi
          done
        else
          echo "ℹ️ No changes to commit"
        fi

    - name: Create monitoring summary
      run: |
        echo "## 🐼 Panda Cam Monitoring Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Monitoring Timestamp:** $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### System Status:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        cat panda_analysis.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Features:" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 **Smart Connection Testing** - Tests multiple zoo endpoints with realistic browser headers" >> $GITHUB_STEP_SUMMARY
        echo "- 🎨 **Dynamic Status Images** - Creates informative status images when webcam is unavailable" >> $GITHUB_STEP_SUMMARY
        echo "- 🤖 **AI-Powered Analysis** - Uses GitHub Models to analyze and explain current status" >> $GITHUB_STEP_SUMMARY
        echo "- 📝 **Automated Blog Updates** - Updates blog with friendly status messages" >> $GITHUB_STEP_SUMMARY
        echo "- ⏰ **Scheduled Monitoring** - Runs every 30 minutes during zoo hours" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 [View Updated Blog](https://github.com/${{ github.repository }}/blob/main/webpage/actionsblog.md)" >> $GITHUB_STEP_SUMMARY

    - name: Cleanup
      run: |
        # Clean up temporary files
        rm -f panda_cam_base64.txt api_request.json api_response.json panda_analysis.txt enhanced_capture.py
        echo "🧹 Cleanup completed"
